@model NetMud.Models.GameAdmin.ManageInanimateDataViewModel
@{
    ViewBag.Title = "Manage inanimates";
    var prevPageState = Model.CurrentPageNumber > 1 ? String.Empty : "disabled";
    var nextPageState = Model.CurrentPageNumber < Model.NumberOfPages ? String.Empty : "disabled";
}

<h2>@ViewBag.Title</h2>

<p class="text-success">@ViewBag.StatusMessage</p>
@{
    if (Model.Items.Count() > 0)
    {
        <h4>Inanimate Backing Data</h4>
        using (Html.BeginForm("ManageInanimateData", "GameAdmin", FormMethod.Post, new { id = "paginationForm" }))
        {
            @Html.AntiForgeryToken()

            <nav>
                <ul class="pagination" style="float: right;">
                    <li style="float: left;">
                        <div class="col-md-10" style="width: inherit;">
                            @Html.TextBoxFor(m => m.SearchTerms, new { @class = "form-control", @style = "width: 200px;float: left;margin-right: 15px;", @title = "Search Term", @onchange = "paginationForm.submit();" })
                            @Html.TextBoxFor(m => m.ItemsPerPage, new { @class = "form-control", @style = "width: 50px;float: left;", @title = "Items Per Page", @onchange = "paginationForm.submit();" })
                        </div>
                    </li>
                    <li class="@prevPageState">
                        <button aria-label="Previous" value="@(Model.CurrentPageNumber - 1)" title="Previous" name="CurrentPageNumber"><span aria-hidden="true">&laquo;</span></button>
                    </li>
                    @for (var i = 1; i <= Model.NumberOfPages; i++)
                    {
                        if (Model.NumberOfPages > 5
                                && i != 1
                                && i != Model.NumberOfPages
                                && i > (Model.NumberOfPages / 2 + 1)
                                && i < (Model.NumberOfPages / 2 - 1))
                        {
                            continue;
                        }

                        <li>
                            <button value="@i" title="@i" name="CurrentPageNumber">@i.ToString()</button>
                        </li>
                    }
                    <li class="@nextPageState">
                        <button aria-label="Next" value="@(Model.CurrentPageNumber + 1)" title="Next" name="CurrentPageNumber"><span aria-hidden="true">&raquo;</span></button>
                    </li>
                </ul>
            </nav>
        }
        @Html.ValidationMessageFor(m => m.ItemsPerPage, "", new { @class = "text-danger" })
        @Html.ValidationMessageFor(m => m.SearchTerms, "", new { @class = "text-danger" })

        using (Html.BeginForm("RemoveInanimateData", "GameAdmin"))
        {
            @Html.AntiForgeryToken()
            <table class="table">
                <tbody>


                    @foreach (var obj in Model.CurrentPageOfItems)
                    {
                        <tr>
                            <td>@obj.ID</td>
                            <td>@obj.Name</td>
                            <td>
                                <div>
                                    @Html.Hidden("ID", obj.ID)
                                    <input type="submit" style="color: red; border: none; padding: 0; background-color: inherit;" value="X" title="Delete this" />
                                    <input type="radio" name="authorize" value="@obj.ID" style="margin-left: 15px;" />
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }

    }
    <section id="newCharacterForm">
        @using (Html.BeginForm("AddInanimateData", "GameAdmin", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
        {
            @Html.AntiForgeryToken()
            <h4>New Inanimate</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(m => m.NewName, new { @class = "col-md-2 control-label" })
                <div class="col-md-10">
                    @Html.TextBoxFor(m => m.NewName, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.NewName, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        }
    </section>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}